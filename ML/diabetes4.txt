# Import necessary libraries for data manipulation, scaling, model training, and evaluation
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score

# Load the diabetes dataset
df = pd.read_csv('diabetes.csv')

# Display the first few rows of the dataset to understand its structure
print(df.head())

# Separate features and target variable
X = df.iloc[:, :-1].values  # All columns except the last one as features
y = df.iloc[:, -1].values   # The last column as the target (diabetes outcome)

# Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the feature data to normalize the range of values
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)  # Fit and transform the training data
X_test = scaler.transform(X_test)        # Transform test data using the same scaler

# Instantiate the K-Nearest Neighbors model with 7 neighbors (you can adjust this number)
knn = KNeighborsClassifier(n_neighbors=7)

# Train the model on the training data
knn.fit(X_train, y_train)

# Predict the labels for the test set
y_pred = knn.predict(X_test)

# Calculate and display the confusion matrix for model evaluation
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)

# Calculate and print the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy: ", accuracy)

# Calculate the error rate (1 - accuracy)
error_rate = 1 - accuracy
print("Error Rate: ", error_rate)

# Calculate and print the precision of the model
precision = precision_score(y_test, y_pred)
print("Precision: ", precision)

# Calculate and print the recall of the model
recall = recall_score(y_test, y_pred)
print("Recall: ", recall)
